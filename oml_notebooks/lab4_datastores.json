{"paragraphs":[{"text":"%md\n# Use Datastores to store Python objects\n\n## Introduction\n\nThis lab walks you through the steps to use and work with datastores.\n\nEstimated Lab Time: 20 minutes\n\n### About Datastore\n**Datastores** exist in the user’s Oracle Database schema. A datastore, and the objects it contains, persist in the database until explicitly deleted. By using a datastore, you can store Python objects in a named datastore entry. This named datastore can then be used in subsequent Python sessions, and even be made available to other users or programs by granting/revoking read permissions.\n\nPython objects, including OML4Py proxy objects, exist for the duration of the current Python session unless you explicitly save them. You can save one or more Python objects, including OML proxy objects, to a named datastore and then load those objects in a later Python session. This is also useful when using embedded Python execution.\nBy using a datastore, you can:\n* Save OML4Py and other Python objects for use across Python sessions\n* Grant or revoke read privilege access to a datastore or its objects to one or more users. You can restore the saved objects in another Python session.\n* Easily pass multiple and non-scalar arguments to Python functions for use in embedded Python execution from Python, REST, and SQL  API. **Note:** SQL and REST APIs support passing scalar values, such as datastore name or numeric values, only.\n* List available datastores and explore datastore contents\n\n### Objectives\n\nIn this lab, you will learn how to:\n* Move objects between datastore and a Python sessions\n* Save Python objects in a datastore\n* Save model objects in a datastore\n* Load datastore objects into memory\n* View datastore and its details\n* Manage datastore privileges\n* Delete datastores\n\n\n## **Step 1**: Import libraries supporting OML4Py and create data table\n\nTo use OML4Py, first import the package `oml`. Also import the pandas package for pandas-specific functionality.\n\n**Note:** This lab requires the `PYQADMIN` role to use some functionalities in this lab, and in the Embedded Python Execution.\n\n1.1. Run the following commands to imports the `oml` module and the `Pandas` package. Import the Pandas package work with oml DataFrames.","user":"OMLUSER","dateUpdated":"2021-03-22T18:08:29+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Use Datastores to store Python objects</h1>\n<h2>Introduction</h2>\n<p>This lab walks you through the steps to use and work with datastores.</p>\n<p>Estimated Lab Time: 20 minutes</p>\n<h3>About Datastore</h3>\n<p><strong>Datastores</strong> exist in the user’s Oracle Database schema. A datastore, and the objects it contains, persist in the database until explicitly deleted. By using a datastore, you can store Python objects in a named datastore entry. This named datastore can then be used in subsequent Python sessions, and even be made available to other users or programs by granting/revoking read permissions.</p>\n<p>Python objects, including OML4Py proxy objects, exist for the duration of the current Python session unless you explicitly save them. You can save one or more Python objects, including OML proxy objects, to a named datastore and then load those objects in a later Python session. This is also useful when using embedded Python execution.\n<br  />By using a datastore, you can:</p>\n<ul>\n<li>Save OML4Py and other Python objects for use across Python sessions</li>\n<li>Grant or revoke read privilege access to a datastore or its objects to one or more users. You can restore the saved objects in another Python session.</li>\n<li>Easily pass multiple and non-scalar arguments to Python functions for use in embedded Python execution from Python, REST, and SQL  API. <strong>Note:</strong> SQL and REST APIs support passing scalar values, such as datastore name or numeric values, only.</li>\n<li>List available datastores and explore datastore contents</li>\n</ul>\n<h3>Objectives</h3>\n<p>In this lab, you will learn how to:</p>\n<ul>\n<li>Move objects between datastore and a Python sessions</li>\n<li>Save Python objects in a datastore</li>\n<li>Save model objects in a datastore</li>\n<li>Load datastore objects into memory</li>\n<li>View datastore and its details</li>\n<li>Manage datastore privileges</li>\n<li>Delete datastores</li>\n</ul>\n<h2><strong>Step 1</strong>: Import libraries supporting OML4Py and create data table</h2>\n<p>To use OML4Py, first import the package <code>oml</code>. Also import the pandas package for pandas-specific functionality.</p>\n<p><strong>Note:</strong> This lab requires the <code>PYQADMIN</code> role to use some functionalities in this lab, and in the Embedded Python Execution.</p>\n<p>1.1. Run the following commands to imports the <code>oml</code> module and the <code>Pandas</code> package. Import the Pandas package work with oml DataFrames.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_-668177394","id":"20210322-180655_1191689674","dateCreated":"2021-03-20T07:54:35+0000","dateStarted":"2021-03-22T18:08:29+0000","dateFinished":"2021-03-22T18:08:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"focus":true,"$$hashKey":"object:40"},{"text":"%python\nimport pandas as pd\nimport oml","user":"OMLUSER","dateUpdated":"2021-03-22T18:08:32+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/undefined","fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"interrupted":false,"jobName":"paragraph_1616436415079_169022648","id":"20210322-180655_1275454783","dateCreated":"2021-03-20T08:01:16+0000","dateStarted":"2021-03-22T18:08:32+0000","dateFinished":"2021-03-22T18:08:40+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:41"},{"text":"%md\n## **Step 2:** Create Pandas DataFrames and load them into Autonomous Database\n\nIn this step, you will work with three data set - IRIS data set, Diabetes data set, and Boston data set. Here, you will learn how to:\n\n* Load these three data sets and for each combine the target and predictors into a single DataFrame\n* Create and display the columns for each data set\n* Use the dataframe to explore the datastore functionality\n\n2.1. Run the following command to sync the IRIS table in the OMLUSER schema to an OML DataFrame proxy object:","user":"OMLUSER","dateUpdated":"2021-03-22T18:08:40+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2><strong>Step 2:</strong> Create Pandas DataFrames and load them into Autonomous Database</h2>\n<p>In this step, you will work with three data set - IRIS data set, Diabetes data set, and Boston data set. Here, you will learn how to:</p>\n<ul>\n<li>Load these three data sets and for each combine the target and predictors into a single DataFrame</li>\n<li>Create and display the columns for each data set</li>\n<li>Use the dataframe to explore the datastore functionality</li>\n</ul>\n<p>2.1. Run the following command to sync the IRIS table in the OMLUSER schema to an OML DataFrame proxy object:</p>\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_-996683700","id":"20210322-180655_1395971652","dateCreated":"2021-03-20T08:01:23+0000","dateStarted":"2021-03-22T18:08:40+0000","dateFinished":"2021-03-22T18:08:40+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:42"},{"text":"%python\nIRIS = oml.sync(\"OMLUSER\", view = \"IRIS_VIEW\")\n\nprint(IRIS.columns)","user":"OMLUSER","dateUpdated":"2021-03-22T18:08:40+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/undefined","fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"['SEPAL_LENGTH', 'SEPAL_WIDTH', 'PETAL_LENGTH', 'PETAL_WIDTH', 'SPECIES']\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_5858790","id":"20210322-180655_91636034","dateCreated":"2021-03-20T08:01:23+0000","dateStarted":"2021-03-22T18:08:40+0000","dateFinished":"2021-03-22T18:08:41+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:43"},{"text":"%md\n2.2. Run the following script to create the temporary Diabetes table:","user":"OMLUSER","dateUpdated":"2021-03-22T18:08:41+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>2.2. Run the following script to create the temporary Diabetes table:</p>\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_-600730748","id":"20210322-180655_2137347531","dateCreated":"2021-03-20T08:01:23+0000","dateStarted":"2021-03-22T18:08:41+0000","dateFinished":"2021-03-22T18:08:41+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:44"},{"text":"%python\nfrom sklearn import datasets\ndiabetes = datasets.load_diabetes()\nx = pd.DataFrame(diabetes.data, columns=diabetes.feature_names)\ny = pd.DataFrame(diabetes.target, columns=['disease_progression'])\n\nDIABETES_TMP = oml.push(pd.concat([x, y], axis=1))\nprint(DIABETES_TMP.columns)","user":"OMLUSER","dateUpdated":"2021-03-22T18:08:41+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/undefined","fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"['age', 'sex', 'bmi', 'bp', 's1', 's2', 's3', 's4', 's5', 's6', 'disease_progression']\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_408284046","id":"20210322-180655_480930565","dateCreated":"2021-03-20T08:01:23+0000","dateStarted":"2021-03-22T18:08:42+0000","dateFinished":"2021-03-22T18:08:42+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:45"},{"text":"%md\n2.3. Run the following script to create the Boston table:","user":"OMLUSER","dateUpdated":"2021-03-22T18:08:42+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>2.3. Run the following script to create the Boston table:</p>\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_-970585636","id":"20210322-180655_1775831074","dateCreated":"2021-03-20T08:01:23+0000","dateStarted":"2021-03-22T18:08:42+0000","dateFinished":"2021-03-22T18:08:42+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:46"},{"text":"%python\nboston = datasets.load_boston()\nx = pd.DataFrame(boston.data, columns = boston.feature_names.tolist())\ny = pd.DataFrame(boston.target, columns = ['Value'])\n\nBOSTON_TMP = oml.push(pd.concat([x, y], axis=1))\nprint(BOSTON_TMP.columns)","user":"OMLUSER","dateUpdated":"2021-03-22T18:08:42+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/undefined","fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'Value']\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_1029623689","id":"20210322-180655_1586636810","dateCreated":"2021-03-20T08:01:23+0000","dateStarted":"2021-03-22T18:08:43+0000","dateFinished":"2021-03-22T18:08:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:47"},{"text":"%md\n## **Step 3:** Save Python objects to datastore\n\nIn this step, you will save the actual Iris data set and the temporary BOSTON proxy object to a datastore named `ds_pydata`, overwriting if the named datastore already exists.\n\n**Note:** You can store actual data objects in a datastore, but large data objects should remain as database tables for performance and scalability.    \n\nBy storing the `BOSTON_TMP` object, the temporary table will not be deleted when the session terminates.\n\n3.1. Run the following script to save the `IRIS` and `BOSTON_TMP` tables in the Autonomous Database:","user":"OMLUSER","dateUpdated":"2021-03-22T18:08:43+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2><strong>Step 3:</strong> Save Python objects to datastore</h2>\n<p>In this step, you will save the actual Iris data set and the temporary BOSTON proxy object to a datastore named <code>ds_pydata</code>, overwriting if the named datastore already exists.</p>\n<p><strong>Note:</strong> You can store actual data objects in a datastore, but large data objects should remain as database tables for performance and scalability.</p>\n<p>By storing the <code>BOSTON_TMP</code> object, the temporary table will not be deleted when the session terminates.</p>\n<p>3.1. Run the following script to save the <code>IRIS</code> and <code>BOSTON_TMP</code> tables in the Autonomous Database:</p>\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_767759729","id":"20210322-180655_185394462","dateCreated":"2021-03-20T08:01:23+0000","dateStarted":"2021-03-22T18:08:44+0000","dateFinished":"2021-03-22T18:08:44+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:48"},{"text":"%python\noml.ds.save(objs={'oml_iris':IRIS, 'oml_boston':BOSTON_TMP},\n            name=\"ds_pydata\", description = \"python datasets\",\n            overwrite=True)","user":"OMLUSER","dateUpdated":"2021-03-22T18:08:44+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/undefined","fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"interrupted":false,"jobName":"paragraph_1616436415079_2134680795","id":"20210322-180655_1144083769","dateCreated":"2021-03-20T08:01:22+0000","dateStarted":"2021-03-22T18:08:44+0000","dateFinished":"2021-03-22T18:08:49+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:49"},{"text":"%md\n3.2. Save the `DIABETES_TMP` tables into the database.\n\n**Note:** The condition `append=TRUE` adds the object to the datastore, if it already exists.  The default is `append=False`, and in that case, you will receive an error stating that the datastore exists and it won't be able to create it again.","user":"OMLUSER","dateUpdated":"2021-03-22T18:08:49+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>3.2. Save the <code>DIABETES_TMP</code> tables into the database.</p>\n<p><strong>Note:</strong> The condition <code>append=TRUE</code> adds the object to the datastore, if it already exists.  The default is <code>append=False</code>, and in that case, you will receive an error stating that the datastore exists and it won't be able to create it again.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_39729373","id":"20210322-180655_1695075717","dateCreated":"2021-03-20T08:01:22+0000","dateStarted":"2021-03-22T18:08:49+0000","dateFinished":"2021-03-22T18:08:49+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:50"},{"text":"%python\noml.ds.save(objs={'oml_diabetes':DIABETES_TMP}, name=\"ds_pydata\", append=True)","user":"OMLUSER","dateUpdated":"2021-03-22T18:08:49+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/undefined","fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"interrupted":false,"jobName":"paragraph_1616436415079_-613586261","id":"20210322-180655_706046806","dateCreated":"2021-03-20T08:01:22+0000","dateStarted":"2021-03-22T18:08:50+0000","dateFinished":"2021-03-22T18:08:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:51"},{"text":"%md\n3.3. Save the `IRIS` table to a new datastore, and then list the datastores. Notice that you see the datastore name, the number of objects in the datastore, the size in bytes consumed, when the datastore was create/updated, and any description provided by the user. The two datastores `ds_iris_data` and `ds_pydata` are present, with the latter containing the three objects you added.","user":"OMLUSER","dateUpdated":"2021-03-22T18:08:54+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>3.3. Save the <code>IRIS</code> table to a new datastore, and then list the datastores. Notice that you see the datastore name, the number of objects in the datastore, the size in bytes consumed, when the datastore was create/updated, and any description provided by the user. The two datastores <code>ds_iris_data</code> and <code>ds_pydata</code> are present, with the latter containing the three objects you added.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_-1675228816","id":"20210322-180655_1180520223","dateCreated":"2021-03-20T08:01:22+0000","dateStarted":"2021-03-22T18:08:55+0000","dateFinished":"2021-03-22T18:08:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:52"},{"text":"%python\noml.ds.save(objs={'iris':IRIS},\nname=\"ds_iris_data\", description = \"iris dataset\", overwrite=True)\n\noml.ds.dir()","user":"OMLUSER","dateUpdated":"2021-03-22T18:08:55+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/undefined","fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"  datastore_name  object_count  size                date      description\n0   ds_iris_data             1   696 2021-03-22 18:08:55     iris dataset\n1      ds_pydata             3  2619 2021-03-22 18:08:45  python datasets\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_-173304477","id":"20210322-180655_143348336","dateCreated":"2021-03-20T08:01:22+0000","dateStarted":"2021-03-22T18:08:55+0000","dateFinished":"2021-03-22T18:08:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:53"},{"text":"%md\n## **Step 4:** Save model objects in a datastore\n\nThis step illustrates how to store other types of objects in datastores. For this, you will create regression models using sklearn and OML4Py.\n\n4.1. Run the following script to build two regression models - `regr1` and `regr2`. The `regr1` uses the open  source function `LinearRegression()` and the `regr2` uses the OML function `oml.glm()`.\n\n**Note:** This highlights that both open source models and in-database model proxy objects can be stored in a datastore. Like tables created using `oml.push` function, default-named model proxy objects are dropped at the end of the database connection unless they are saved in a datastore.","user":"OMLUSER","dateUpdated":"2021-03-22T18:08:56+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2><strong>Step 4:</strong> Save model objects in a datastore</h2>\n<p>This step illustrates how to store other types of objects in datastores. For this, you will create regression models using sklearn and OML4Py.</p>\n<p>4.1. Run the following script to build two regression models - <code>regr1</code> and <code>regr2</code>. The <code>regr1</code> uses the open  source function <code>LinearRegression()</code> and the <code>regr2</code> uses the OML function <code>oml.glm()</code>.</p>\n<p><strong>Note:</strong> This highlights that both open source models and in-database model proxy objects can be stored in a datastore. Like tables created using <code>oml.push</code> function, default-named model proxy objects are dropped at the end of the database connection unless they are saved in a datastore.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_217847457","id":"20210322-180655_734839297","dateCreated":"2021-03-20T08:01:22+0000","dateStarted":"2021-03-22T18:08:56+0000","dateFinished":"2021-03-22T18:08:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:54"},{"text":"%python\nfrom sklearn import linear_model\n\nregr1 = linear_model.LinearRegression()\nregr1.fit(boston.data, boston.target)\n\nregr2 = oml.glm(\"regression\")\nX = BOSTON_TMP.drop('Value')\ny = BOSTON_TMP['Value']\nregr2 = regr2.fit(X, y)","user":"OMLUSER","dateUpdated":"2021-03-22T18:08:56+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/undefined","fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"interrupted":false,"jobName":"paragraph_1616436415079_624560216","id":"20210322-180655_713180149","dateCreated":"2021-03-20T08:03:13+0000","dateStarted":"2021-03-22T18:08:56+0000","dateFinished":"2021-03-22T18:08:58+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:55"},{"text":"%md\n4.2. Run the following script to save the objects `regr1` and `regr2` to the datastore `ds_pymodels`, and allow the read privilege to be granted to them.\n\n**Note:** `overwrite=True` indicates that the contents of the datastore should be replaced.","user":"OMLUSER","dateUpdated":"2021-03-22T18:08:58+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>4.2. Run the following script to save the objects <code>regr1</code> and <code>regr2</code> to the datastore <code>ds_pymodels</code>, and allow the read privilege to be granted to them.</p>\n<p><strong>Note:</strong> <code>overwrite=True</code> indicates that the contents of the datastore should be replaced.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_1501489879","id":"20210322-180655_109822989","dateCreated":"2021-03-20T08:03:13+0000","dateStarted":"2021-03-22T18:08:59+0000","dateFinished":"2021-03-22T18:08:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:56"},{"text":"%python\noml.ds.save(objs={'regr1':regr1, 'regr2':regr2},\n            name=\"ds_pymodels\", grantable=True,\n            overwrite=True)\n\noml.ds.dir()","user":"OMLUSER","dateUpdated":"2021-03-22T18:08:59+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/undefined","fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"  datastore_name  object_count  size                date      description\n0   ds_iris_data             1   696 2021-03-22 18:08:55     iris dataset\n1      ds_pydata             3  2619 2021-03-22 18:08:45  python datasets\n2    ds_pymodels             2  4360 2021-03-22 18:08:59             None\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_1735466200","id":"20210322-180655_1413553790","dateCreated":"2021-03-20T08:03:13+0000","dateStarted":"2021-03-22T18:08:59+0000","dateFinished":"2021-03-22T18:08:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:57"},{"text":"%md\n4.3. Now grant the read privilege to all users by specifying `user=None`. Finally, list the datastores to which the read privilege has been granted.","user":"OMLUSER","dateUpdated":"2021-03-22T18:08:59+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>4.3. Now grant the read privilege to all users by specifying <code>user=None</code>. Finally, list the datastores to which the read privilege has been granted.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_-703838549","id":"20210322-180655_424673853","dateCreated":"2021-03-20T08:03:13+0000","dateStarted":"2021-03-22T18:09:00+0000","dateFinished":"2021-03-22T18:09:00+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:58"},{"text":"%python\noml.grant(name=\"ds_pymodels\", typ=\"datastore\", user=None)\n\noml.ds.dir(dstype=\"grant\")","user":"OMLUSER","dateUpdated":"2021-03-22T18:09:00+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/undefined","fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"  datastore_name grantee\n0    ds_pymodels  PUBLIC\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_-1546537639","id":"20210322-180655_561342217","dateCreated":"2021-03-20T08:03:13+0000","dateStarted":"2021-03-22T18:09:00+0000","dateFinished":"2021-03-22T18:09:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:59"},{"text":"%md\n## **Step 5:**  Load datastore objects into memory\n\nIn this step, you load all Python objects from a datastore to the global workspace and sort the result by name. Notice that they have the name specified in the dictionary when saved.\n\n5.1. Run the following script to load the datastore `ds_pydata` into memory:","user":"OMLUSER","dateUpdated":"2021-03-22T18:09:04+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2><strong>Step 5:</strong>  Load datastore objects into memory</h2>\n<p>In this step, you load all Python objects from a datastore to the global workspace and sort the result by name. Notice that they have the name specified in the dictionary when saved.</p>\n<p>5.1. Run the following script to load the datastore <code>ds_pydata</code> into memory:</p>\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_-1122542778","id":"20210322-180655_2030462086","dateCreated":"2021-03-20T08:03:13+0000","dateStarted":"2021-03-22T18:09:04+0000","dateFinished":"2021-03-22T18:09:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:60"},{"text":"%python\nsorted(oml.ds.load(name=\"ds_pydata\"))","user":"OMLUSER","dateUpdated":"2021-03-22T18:09:04+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/undefined","fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"['oml_boston', 'oml_diabetes', 'oml_iris']\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_2003118335","id":"20210322-180655_635971382","dateCreated":"2021-03-20T08:03:13+0000","dateStarted":"2021-03-22T18:09:04+0000","dateFinished":"2021-03-22T18:09:08+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:61"},{"text":"%md\n5.2. Run the following script to load the named Python object `regr2` (regression model), from the datastore to the global workspace.\n\n**Note:** Using the boolean `to_globals` parameter, you can specify whether the objects are loaded to a global workspace or to a dictionary object. If the argument is `to_globals=True`, then `oml.ds.load` function loads the objects into the global workspace. If the argument is `to_globals=False`, then the function returns a dict object that contains pairs of object names and values.","user":"OMLUSER","dateUpdated":"2021-03-22T18:09:08+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>5.2. Run the following script to load the named Python object <code>regr2</code> (regression model), from the datastore to the global workspace.</p>\n<p><strong>Note:</strong> Using the boolean <code>to_globals</code> parameter, you can specify whether the objects are loaded to a global workspace or to a dictionary object. If the argument is <code>to_globals=True</code>, then <code>oml.ds.load</code> function loads the objects into the global workspace. If the argument is <code>to_globals=False</code>, then the function returns a dict object that contains pairs of object names and values.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_-2036079503","id":"20210322-180655_1018206300","dateCreated":"2021-03-20T08:03:12+0000","dateStarted":"2021-03-22T18:09:09+0000","dateFinished":"2021-03-22T18:09:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:62"},{"text":"%python\noml.ds.load(name=\"ds_pymodels\", objs=[\"regr2\"], to_globals=True)","user":"OMLUSER","dateUpdated":"2021-03-22T18:09:09+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/undefined","fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"['regr2']\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_-637311989","id":"20210322-180655_913829356","dateCreated":"2021-03-20T08:03:12+0000","dateStarted":"2021-03-22T18:09:09+0000","dateFinished":"2021-03-22T18:09:13+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:63"},{"text":"%md\n5.3. Run the following script to view the model details","user":"OMLUSER","dateUpdated":"2021-03-22T18:09:13+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>5.3. Run the following script to view the model details</p>\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_1495402735","id":"20210322-180655_2090835440","dateCreated":"2021-03-20T08:04:36+0000","dateStarted":"2021-03-22T18:09:13+0000","dateFinished":"2021-03-22T18:09:13+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:64"},{"text":"%python\nregr2","user":"OMLUSER","dateUpdated":"2021-03-22T18:09:13+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/undefined","fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nAlgorithm Name: Generalized Linear Model\n\nMining Function: REGRESSION\n\nTarget: Value\n\nSettings: \n                   setting name                  setting value\n0                     ALGO_NAME  ALGO_GENERALIZED_LINEAR_MODEL\n1               GLMS_CONF_LEVEL                            .95\n2           GLMS_FTR_GENERATION    GLMS_FTR_GENERATION_DISABLE\n3            GLMS_FTR_SELECTION     GLMS_FTR_SELECTION_DISABLE\n4                  ODMS_DETAILS                    ODMS_ENABLE\n5  ODMS_MISSING_VALUE_TREATMENT        ODMS_MISSING_VALUE_AUTO\n6                 ODMS_SAMPLING          ODMS_SAMPLING_DISABLE\n7                     PREP_AUTO                             ON\n\nComputed Settings: \n            setting name            setting value\n0    GLMS_CONV_TOLERANCE  .0000050000000000000004\n1    GLMS_NUM_ITERATIONS                       30\n2  GLMS_RIDGE_REGRESSION   GLMS_RIDGE_REG_DISABLE\n3            GLMS_SOLVER         GLMS_SOLVER_CHOL\n\nGlobal Statistics: \n             attribute name attribute value\n0         ADJUSTED_R_SQUARE         0.73379\n1                       AIC         1589.64\n2                 COEFF_VAR         21.0595\n3                 CONVERGED             YES\n4        CORRECTED_TOTAL_DF             505\n5          CORRECTED_TOT_SS         42716.3\n6            DEPENDENT_MEAN         22.5328\n7                  ERROR_DF             492\n8         ERROR_MEAN_SQUARE         22.5179\n9         ERROR_SUM_SQUARES         11078.8\n10                  F_VALUE         108.077\n11                    GMSEP         23.1597\n12               HOCKING_SP        0.045861\n13                      J_P         23.1409\n14                 MODEL_DF              13\n15          MODEL_F_P_VALUE               0\n16        MODEL_MEAN_SQUARE         2433.65\n17        MODEL_SUM_SQUARES         31637.5\n18               NUM_PARAMS              14\n19                 NUM_ROWS             506\n20          RANK_DEFICIENCY               0\n21             ROOT_MEAN_SQ          4.7453\n22                     R_SQ        0.740643\n23                     SBIC         1648.81\n24  VALID_COVARIANCE_MATRIX             YES\n\nAttributes: \nAGE\nB\nCHAS\nCRIM\nDIS\nINDUS\nLSTAT\nNOX\nPTRATIO\nRAD\nRM\nTAX\nZN\n\nPartition: NO\n\nCoefficients: \n\n   attribute name attribute value  ...       p value  significance code\n0     (Intercept)            None  ...  3.283438e-12                ***\n1             AGE            None  ...  9.582293e-01                   \n2               B            None  ...  5.728592e-04                ***\n3            CHAS            None  ...  1.925030e-03                 **\n4            CRIM            None  ...  1.086810e-03                 **\n5             DIS            None  ...  6.013491e-13                ***\n6           INDUS            None  ...  7.382881e-01                   \n7           LSTAT            None  ...  7.776912e-23                ***\n8             NOX            None  ...  4.245644e-06                ***\n9         PTRATIO            None  ...  1.308835e-12                ***\n10            RAD            None  ...  5.070529e-06                ***\n11             RM            None  ...  1.979441e-18                ***\n12            TAX            None  ...  1.111637e-03                 **\n13             ZN            None  ...  7.781097e-04                ***\n\n[14 rows x 7 columns]\n\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 '\n\nFit Details: \n\n                       name         value\n0         ADJUSTED_R_SQUARE      0.733790\n1                       AIC   1589.642798\n2                 COEFF_VAR     21.059508\n3        CORRECTED_TOTAL_DF    505.000000\n4          CORRECTED_TOT_SS  42716.295415\n5            DEPENDENT_MEAN     22.532806\n6                  ERROR_DF    492.000000\n7         ERROR_MEAN_SQUARE     22.517855\n8         ERROR_SUM_SQUARES  11078.784578\n9                   F_VALUE    108.076666\n10                    GMSEP     23.159731\n11               HOCKING_SP      0.045861\n12                      J_P     23.140878\n13          MODEL_CONVERGED      1.000000\n14                 MODEL_DF     13.000000\n15          MODEL_F_P_VALUE      0.000000\n16        MODEL_MEAN_SQUARE   2433.654680\n17        MODEL_SUM_SQUARES  31637.510837\n18               NUM_PARAMS     14.000000\n19                 NUM_ROWS    506.000000\n20          RANK_DEFICIENCY      0.000000\n21             ROOT_MEAN_SQ      4.745298\n22                     R_SQ      0.740643\n23                     SBIC   1648.814312\n24  VALID_COVARIANCE_MATRIX      1.000000\n\nRank: \n\n14\n\nDeviance: \n\n11078.784578\n\nAIC: \n\n1590\n\nNull Deviance: \n\n42716.295415\n\nDF Residual: \n\n492.0\n\nDF Null: \n\n505.0\n\nConverged: \n\nTrue\n\n\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_-1210588773","id":"20210322-180655_413844674","dateCreated":"2021-03-20T08:04:36+0000","dateStarted":"2021-03-22T18:09:13+0000","dateFinished":"2021-03-22T18:09:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:65"},{"text":"%md\n5.4. Run the following script to load the named Python object `regr1`, from the datastore to the user's workspace.\n\n**Note:** Using the boolean `to_globals` parameter, you can specify whether the objects are loaded to a global workspace or to a dictionary object. If the argument is `to_globals=True`, then `oml.ds.load` function loads the objects into the global workspace. If the argument is `to_globals=False`, then the function returns a dict object that contains pairs of object names and values.","user":"OMLUSER","dateUpdated":"2021-03-22T18:09:14+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>5.4. Run the following script to load the named Python object <code>regr1</code>, from the datastore to the user's workspace.</p>\n<p><strong>Note:</strong> Using the boolean <code>to_globals</code> parameter, you can specify whether the objects are loaded to a global workspace or to a dictionary object. If the argument is <code>to_globals=True</code>, then <code>oml.ds.load</code> function loads the objects into the global workspace. If the argument is <code>to_globals=False</code>, then the function returns a dict object that contains pairs of object names and values.</p>\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_1886221987","id":"20210322-180655_551603699","dateCreated":"2021-03-20T08:04:36+0000","dateStarted":"2021-03-22T18:09:14+0000","dateFinished":"2021-03-22T18:09:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:66"},{"text":"%python\noml.ds.load(name=\"ds_pymodels\", objs=[\"regr1\"], to_globals=False)","user":"OMLUSER","dateUpdated":"2021-03-22T18:09:14+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/undefined","fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"{'regr1': LinearRegression()}\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_-1801079254","id":"20210322-180655_695295118","dateCreated":"2021-03-20T08:04:36+0000","dateStarted":"2021-03-22T18:09:15+0000","dateFinished":"2021-03-22T18:09:17+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:67"},{"text":"%md\n## **Step 6:** View datastores and other details\n\nThis step shows how to work with datastores.\n\n6.1. Run the following script to get the list of datastore and a count of the objects in it:","user":"OMLUSER","dateUpdated":"2021-03-22T18:09:17+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2><strong>Step 6:</strong> View datastores and other details</h2>\n<p>This step shows how to work with datastores.</p>\n<p>6.1. Run the following script to get the list of datastore and a count of the objects in it:</p>\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_1481461968","id":"20210322-180655_687940685","dateCreated":"2021-03-20T08:04:36+0000","dateStarted":"2021-03-22T18:09:17+0000","dateFinished":"2021-03-22T18:09:17+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:68"},{"text":"%python\noml.ds.dir(dstype=\"all\")[['owner', 'datastore_name', 'object_count']]","user":"OMLUSER","dateUpdated":"2021-03-22T18:09:18+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/undefined","fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"     owner datastore_name  object_count\n0  OMLUSER   ds_iris_data             1\n1  OMLUSER      ds_pydata             3\n2  OMLUSER    ds_pymodels             2\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_-1757040179","id":"20210322-180655_1740859771","dateCreated":"2021-03-20T08:05:14+0000","dateStarted":"2021-03-22T18:09:18+0000","dateFinished":"2021-03-22T18:09:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:69"},{"text":"%md\n6.2. Run the following script to list the datastores to which other users have been granted the read privilege:","user":"OMLUSER","dateUpdated":"2021-03-22T18:09:19+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>6.2. Run the following script to list the datastores to which other users have been granted the read privilege:</p>\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_1956560995","id":"20210322-180655_1097510693","dateCreated":"2021-03-20T08:05:13+0000","dateStarted":"2021-03-22T18:09:20+0000","dateFinished":"2021-03-22T18:09:20+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:70"},{"text":"%python\noml.ds.dir(dstype=\"grant\")","user":"OMLUSER","dateUpdated":"2021-03-22T18:09:20+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/undefined","fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"  datastore_name grantee\n0    ds_pymodels  PUBLIC\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_22391536","id":"20210322-180655_1658588842","dateCreated":"2021-03-20T08:05:33+0000","dateStarted":"2021-03-22T18:09:20+0000","dateFinished":"2021-03-22T18:09:20+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:71"},{"text":"%md\n## **Step 7:** View contents of a datastore\n\nThis step shows how to view/describe the content of a datastore. This example shows the `ds_pydata` datastore. Notice that the three proxy objects are listed.\n\n7.1. Run the following script to list the content of a datastore:","user":"OMLUSER","dateUpdated":"2021-03-22T18:09:20+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2><strong>Step 7:</strong> View contents of a datastore</h2>\n<p>This step shows how to view/describe the content of a datastore. This example shows the <code>ds_pydata</code> datastore. Notice that the three proxy objects are listed.</p>\n<p>7.1. Run the following script to list the content of a datastore:</p>\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_1206333445","id":"20210322-180655_1113554416","dateCreated":"2021-03-20T08:05:33+0000","dateStarted":"2021-03-22T18:09:21+0000","dateFinished":"2021-03-22T18:09:21+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:72"},{"text":"%python\noml.ds.describe(name='ds_pydata')","user":"OMLUSER","dateUpdated":"2021-03-22T18:09:21+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/undefined","fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"    object_name          class  size  length  row_count  col_count\n0    oml_boston  oml.DataFrame  1017     506        506         14\n1  oml_diabetes  oml.DataFrame   907     442        442         11\n2      oml_iris  oml.DataFrame   695     150        150          5\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_-1178150130","id":"20210322-180655_1043025009","dateCreated":"2021-03-20T08:05:33+0000","dateStarted":"2021-03-22T18:09:21+0000","dateFinished":"2021-03-22T18:09:23+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:73"},{"text":"%md\nThe script returns the description of three proxy objects - `iris`, `oml_boston`, and `oml_diabetes`. It lists the class, size, length, row and column count for each object.     \n\n## **Step 8:** Manage datastore privileges\n\nThis step shows how to revoke read privilege, show datastores to which the read privilege has been granted, and again grant read privilege to a user.\n\n8.1. Run the following script to revoke the read privilege from every user:","user":"OMLUSER","dateUpdated":"2021-03-22T18:09:23+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>The script returns the description of three proxy objects - <code>iris</code>, <code>oml_boston</code>, and <code>oml_diabetes</code>. It lists the class, size, length, row and column count for each object.</p>\n<h2><strong>Step 8:</strong> Manage datastore privileges</h2>\n<p>This step shows how to revoke read privilege, show datastores to which the read privilege has been granted, and again grant read privilege to a user.</p>\n<p>8.1. Run the following script to revoke the read privilege from every user:</p>\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_-145577810","id":"20210322-180655_715968278","dateCreated":"2021-03-20T08:04:36+0000","dateStarted":"2021-03-22T18:09:23+0000","dateFinished":"2021-03-22T18:09:23+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:74"},{"text":"%python\noml.revoke(name=\"ds_pymodels\", typ=\"datastore\", user=None)\n\noml.ds.dir(dstype=\"grant\")","user":"OMLUSER","dateUpdated":"2021-03-22T18:09:23+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/undefined","fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Empty DataFrame\nColumns: [datastore_name, grantee]\nIndex: []\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_-1776182292","id":"20210322-180655_671563191","dateCreated":"2021-03-20T08:06:04+0000","dateStarted":"2021-03-22T18:09:23+0000","dateFinished":"2021-03-22T18:09:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:75"},{"text":"%md\n8.2. Run the following script to grant read privilege to `OMLUSER2`:","user":"OMLUSER","dateUpdated":"2021-03-22T18:09:45+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>8.2. Run the following script to grant read privilege to <code>OMLUSER2</code>:</p>\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_666105321","id":"20210322-180655_286160314","dateCreated":"2021-03-20T08:06:04+0000","dateStarted":"2021-03-22T18:09:45+0000","dateFinished":"2021-03-22T18:09:45+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:76"},{"text":"%python\noml.grant(name=\"ds_pymodels\", typ=\"datastore\", user=\"OMLUSER2\")\n\noml.ds.dir(dstype=\"grant\")","user":"OMLUSER","dateUpdated":"2021-03-22T18:09:24+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/undefined","fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"  datastore_name   grantee\n0    ds_pymodels  OMLUSER2\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_1622951205","id":"20210322-180655_1973611310","dateCreated":"2021-03-20T08:06:04+0000","dateStarted":"2021-03-22T18:09:25+0000","dateFinished":"2021-03-22T18:09:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:77"},{"text":"%md\n## **Step 9:** Delete Datastore Content\n\nThis step shows how to use the `oml.ds.delete` function to delete datastores or datastore content.\n\n9.1. Run the following script to delete datastore content:","user":"OMLUSER","dateUpdated":"2021-03-22T18:09:25+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2><strong>Step 9:</strong> Delete Datastore Content</h2>\n<p>This step shows how to use the <code>oml.ds.delete</code> function to delete datastores or datastore content.</p>\n<p>9.1. Run the following script to delete datastore content:</p>\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_1523266744","id":"20210322-180655_960122611","dateCreated":"2021-03-20T08:03:12+0000","dateStarted":"2021-03-22T18:09:25+0000","dateFinished":"2021-03-22T18:09:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:78"},{"text":"%python\noml.ds.delete(name=\"ds_pydata\", objs=[\"IRIS\", \"oml_boston\"])\n\noml.ds.delete(name=\"ds_pydata\")\n\noml.ds.delete(name=\"_pymodels\", regex_match=True)\n\noml.ds.dir()","user":"OMLUSER","dateUpdated":"2021-03-22T18:09:26+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/undefined","fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"  datastore_name  object_count  size                date   description\n0   ds_iris_data             1   696 2021-03-22 18:08:55  iris dataset\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_-92046872","id":"20210322-180655_683747046","dateCreated":"2021-03-20T08:06:42+0000","dateStarted":"2021-03-22T18:09:26+0000","dateFinished":"2021-03-22T18:09:30+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:79"},{"text":"%md\nThe script first deletes the contents of datastore `ds_pydata`, and then deletes the datastore itself. It also deletes the datastore `ds_pymodel` using regular expression pattern matching.\n\n## Learn More\n\n* [About OML4Py Datastores](https://docs.oracle.com/en/database/oracle/machine-learning/oml4py/1/mlpug/about-oml4py-datastores.html#GUID-9FFB5C75-F8DB-4947-844D-4771475A2B39)\n* [Oracle Machine Learning Notebooks](https://docs.oracle.com/en/database/oracle/machine-learning/oml-notebooks/)\n\n## Acknowledgements\n* **Author** - Moitreyee Hazarika, Principal User Assistance Developer\n* **Contributors** -  Mark Hornick, Senior Director, Data Science and Machine Learning; Marcos Arancibia Coddou, Product Manager, Oracle Data Science; Sherry LaMonica, Principal Member of Tech Staff, Advanced Analytics, Machine Learning\n* **Last Updated By/Date** - Tom McGinn and Ashwin Agarwal, March 2021","user":"OMLUSER","dateUpdated":"2021-03-22T18:09:30+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>The script first deletes the contents of datastore <code>ds_pydata</code>, and then deletes the datastore itself. It also deletes the datastore <code>ds_pymodel</code> using regular expression pattern matching.</p>\n<h2>Learn More</h2>\n<ul>\n<li><a href=\"https://docs.oracle.com/en/database/oracle/machine-learning/oml4py/1/mlpug/about-oml4py-datastores.html#GUID-9FFB5C75-F8DB-4947-844D-4771475A2B39\">About OML4Py Datastores</a></li>\n<li><a href=\"https://docs.oracle.com/en/database/oracle/machine-learning/oml-notebooks/\">Oracle Machine Learning Notebooks</a></li>\n</ul>\n<h2>Acknowledgements</h2>\n<ul>\n<li><strong>Author</strong> - Moitreyee Hazarika, Principal User Assistance Developer</li>\n<li><strong>Contributors</strong> -  Mark Hornick, Senior Director, Data Science and Machine Learning; Marcos Arancibia Coddou, Product Manager, Oracle Data Science; Sherry LaMonica, Principal Member of Tech Staff, Advanced Analytics, Machine Learning</li>\n<li><strong>Last Updated By/Date</strong> - Tom McGinn and Ashwin Agarwal, March 2021</li>\n</ul>\n"}]},"interrupted":false,"jobName":"paragraph_1616436415079_-1665755752","id":"20210322-180655_1249912289","dateCreated":"2021-03-20T08:06:41+0000","dateStarted":"2021-03-22T18:09:31+0000","dateFinished":"2021-03-22T18:09:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:80"},{"text":"%md","user":"OMLUSER","dateUpdated":"2021-03-22T14:21:22+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"sql","editOnDblClick":false},"editorMode":"ace/mode/osql","fontSize":9},"settings":{"params":{},"forms":{}},"interrupted":false,"jobName":"paragraph_1616436415079_1372368335","id":"20210322-180655_672750596","dateCreated":"2021-03-20T08:06:41+0000","status":"FINISHED","progressUpdateIntervalMs":500,"commited":false,"$$hashKey":"object:81"}],"name":"Lab 4: Use Datastores to store Python objects","id":"36181","noteParams":{},"noteForms":{},"angularObjects":{"2G424AQ11:shared_process":[],"2G2CYDYVH:shared_process":[],"2G1TJNAU6:shared_process":[],"2G1A2BZ8P:shared_process":[],"2G2EVWE2E:shared_process":[],"2G1UX5P89:shared_process":[],"2FZWD79VS:shared_process":[],"2G41J3MFM:shared_process":[],"2G3Y6X6J4:shared_process":[],"2G28PTTT6:shared_process":[],"2G2RZN57J:shared_process":[],"2G452HH63:shared_process":[],"2G2SM9VW4:shared_process":[],"2G2NK5155:shared_process":[],"2G3BWMN7G:shared_process":[],"2G3D757SY:shared_process":[],"2G2UM4P38:shared_process":[],"2G19NBSD9:shared_process":[],"2G1JPB5S9:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}